trigger:
  branches:
    include:
    - master
  paths:
    include:
    - /pipelines/nlu-cli.yml
    - /models
    - /src
pr:
  branches:
    include:
    - master
  paths:
    include:
    - /pipelines/nlu-cli.yml
    - /models
    - /src

variables:
- name: recordingsDirectory
  value: $(Build.SourcesDirectory)/models/speech_files
  
steps:
- task: DotNetCoreCLI@2
  displayName: Restore NuGet packages for NLU.DevOps
  inputs:
    command: restore
    projects: src/NLU.DevOps.sln

- task: DotNetCoreCLI@2
  displayName: Create NuGet package for NLU.DevOps.CommandLine
  inputs:
    command: pack
    packagesToPack: src/NLU.DevOps.CommandLine
    configuration: Release

- task: DotNetCoreCLI@2
  displayName: Install dotnet-nlu
  inputs:
    command: custom
    custom: tool
    arguments: install dotnet-nlu --add-source $(Build.ArtifactStagingDirectory) --tool-path $(Agent.TempDirectory)/bin
    # Unless you've forked NLU.DevOps and are building from source, you can just install 'dotnet-nlu' from NuGet:
    # arguments: install dotnet-nlu --tool-path $(Agent.TempDirectory)/bin

- bash: echo "##vso[task.prependpath]$(Agent.TempDirectory)/bin"
  displayName: Prepend .NET Core CLI tool path

- task: AzurePowerShell@4
  displayName: Get ARM token for Azure
  condition: and(succeeded(), ne(variables['nlu.ci'], 'false'))
  inputs:
    azureSubscription: $(azureSubscription)
    azurePowerShellVersion: latestVersion
    scriptType: inlineScript
    inline: |
      $azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
      $currentAzureContext = Get-AzContext
      $profileClient = New-Object Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient($azProfile)
      $token = $profileClient.AcquireAccessToken($currentAzureContext.Tenant.TenantId)
      $setVariableMessage = "##vso[task.setvariable variable=arm_token]{0}" -f $token.AccessToken 
      echo $setVariableMessage

- task: DotNetCoreCLI@2
  displayName: Train the NLU service
  inputs:
    command: custom
    custom: nlu
    arguments: train
      --service $(nlu.service)
      --utterances models/utterances.json
      --model-settings models/settings.$(nlu.service).json
      --save-appsettings

- task: DotNetCoreCLI@2
  displayName: Test the NLU model with text
  condition: and(succeeded(), ne(variables['nlu.ci'], 'false'))
  inputs:
    command: custom
    custom: nlu
    arguments: test
      --service $(nlu.service)
      --utterances models/tests.json
      --speech-directory $(recordingsDirectory)
      --model-settings models/settings.$(nlu.service).json
      --output $(Agent.TempDirectory)/results.json

- task: DotNetCoreCLI@2
  displayName: Cleanup the NLU model
  condition: and(always(), ne(variables['nlu.ci'], 'false'))
  inputs:
    command: custom
    custom: nlu
    arguments: clean
      --service $(nlu.service)
      --delete-appsettings

- task: DownloadBuildArtifacts@0
  condition: ne(variables['skipCompare'], 'true')
  displayName: Download test results from master
  inputs:
    buildType: specific
    project: $(System.TeamProject)
    pipeline: $(Build.DefinitionName)
    buildVersionToDownload: latestFromBranch
    branchName: refs/heads/master
    downloadType: single
    artifactName: drop
    downloadPath: $(Agent.TempDirectory)

- task: DotNetCoreCLI@2
  condition: ne(variables['skipCompare'], 'true')
  displayName: Compare the NLU text results with baseline
  inputs:
    command: custom
    custom: nlu
    arguments: compare
      --expected models/tests.json
      --actual $(Agent.TempDirectory)/results.json
      --test-settings models/compare.yml
      --baseline $(Agent.TempDirectory)/drop/statistics.json
      --output-folder $(Build.ArtifactStagingDirectory)

- task: DotNetCoreCLI@2
  condition: eq(variables['skipCompare'], 'true')
  displayName: Compare the NLU text results without baseline
  inputs:
    command: custom
    custom: nlu
    arguments: compare
      --expected models/tests.json
      --actual $(Agent.TempDirectory)/results.json
      --test-settings models/compare.yml
      --output-folder $(Build.ArtifactStagingDirectory)      

- task: DotNetCoreCLI@2
  displayName: Uninstall dotnet-nlu
  inputs:
    command: custom
    custom: tool
    arguments: uninstall dotnet-nlu --tool-path $(Agent.TempDirectory)/bin

- task: PublishTestResults@2
  displayName: Publish test results
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: $(Build.ArtifactStagingDirectory)/**/TestResult.xml

- task: PublishBuildArtifacts@1
  displayName: Publish build artifacts
  condition: succeededOrFailed()
  inputs:
    pathToPublish: $(Build.ArtifactStagingDirectory)
    artifactName: drop
    artifactType: container

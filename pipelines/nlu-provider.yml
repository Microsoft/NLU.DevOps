trigger:
  branches:
    include:
    - master
  paths:
    include:
    - /pipelines/nlu-provider.yml
    - /src
pr:
  branches:
    include:
    - master
  paths:
    include:
    - /pipelines/nlu-provider.yml
    - /src

steps:
- task: DotNetCoreCLI@2
  displayName: Build NLU.DevOps solution
  inputs:
    projects: src/NLU.DevOps.sln
    arguments: --configuration Release /warnaserror

- task: DotNetCoreCLI@2
  displayName: Create NuGet package for NLU.DevOps.CommandLine
  inputs:
    command: pack
    packagesToPack: src/NLU.DevOps.CommandLine
    configuration: Release

- task: DotNetCoreCLI@2
  displayName: Install dotnet-nlu
  inputs:
    command: custom
    custom: tool
    arguments: install dotnet-nlu --add-source $(Build.ArtifactStagingDirectory) --tool-path $(Agent.TempDirectory)/bin

- bash: echo "##vso[task.prependpath]$(Agent.TempDirectory)/bin"
  displayName: Prepend .NET Core CLI tool path

- task: DotNetCoreCLI@2
  displayName: Install dotnet-nlu-demo
  inputs:
    command: custom
    custom: tool
    arguments: install dotnet-nlu-demo --tool-path $(Agent.TempDirectory)/bin

- task: DotNetCoreCLI@2
  displayName: Train the NLU service
  inputs:
    command: custom
    custom: nlu
    arguments: train
      --service demo
      --utterances models/utterances.json
      --save-appsettings

- task: DotNetCoreCLI@2
  displayName: Test the NLU service with text
  condition: and(succeeded(), ne(variables['nlu.ci'], 'false'))
  inputs:
    command: custom
    custom: nlu
    arguments: test
      --service demo
      --utterances models/utterances.json

- task: DotNetCoreCLI@2
  displayName: Cleanup the NLU service
  condition: and(always(), ne(variables['nlu.ci'], 'false'))
  inputs:
    command: custom
    custom: nlu
    arguments: clean
      --service demo
      --delete-appsettings
